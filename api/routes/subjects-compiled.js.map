{"version":3,"sources":["subjects.js"],"names":[],"mappings":"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","file":"subjects-compiled.js","sourcesContent":["/**\n * Created by jonathan on 03/03/16.\n */\n'use strict';\n\nmodule.exports =  (express, io) => {\n\n    const router = express.Router();\n    const auth = require('../auth/auth');\n    const subjectsController = require('../controller/subjects-controller');\n    const utils = require('../utils/utils');\n    io.on('connection',  (socket) => {\n        console.log('Connection on Subjects');\n        /*socket.on('big', ()=> {\n         console.log('big');\n         });\n         socket.emit('get', { 'get':'Express' });*/\n    });\n\n    /* Middleware for authentication */\n    router.use( (req, res, next) => {\n        return auth.ensureAuthenticated(req, res, next);\n    });\n\n    /* GET Course Type listing. */\n    router.get('/',  (req, res) => {\n        subjectsController.list()\n            .then( (subjects) => {\n                res.json({\n                    success: true,\n                    data: subjects\n                });\n            })\n            .catch( (err) => {\n                res.json({\n                    success: false,\n                    data: err\n                });\n            });\n\n    });\n\n    /* GET Course Type by ID. */\n    router.get('/:id',  (req, res) => {\n        let subject = {\n            _id: req.params.id || ''\n        };\n\n        subjectsController.validate(subject, utils.OPERATION_STATUS.SELECT)\n            .then( (psubject) => {\n                return subjectsController.getById(psubject['_id'])\n            })\n            .then( (result) => {\n                if (result) {\n                    res.json({\n                        success: true,\n                        data: result\n                    });\n                } else {\n                    res.status(404).json({\n                        success: false,\n                        data: '404 - Not Found'\n                    });\n                }\n            })\n            .catch( (err) => {\n                res.json({\n                    success: false,\n                    data: err\n                });\n            });\n    });\n\n    /* POST create a Course Type */\n    router.post('/',  (req, res) => {\n        let subject = {\n            description: req.body.description || ''\n        };\n\n        subjectsController.validate(subject, utils.OPERATION_STATUS.NEW)\n            .then(subjectsController.create)\n            .then( (subject) => {\n                res.json({\n                    success: true,\n                    data: subject\n                });\n            })\n            .catch( (err) => {\n                res.json({\n                    success: false,\n                    data: err\n                });\n            });\n    });\n\n\n    /* PUT update a Course Type */\n    router.put('/',  (req, res) => {\n        let subject = {\n            _id: req.body._id || '',\n            description: req.body.description || ''\n        };\n\n        subjectsController.validate(subject, utils.OPERATION_STATUS.UPDATE)\n            .then(subjectsController.update)\n            .then( (result) => {\n                res.json({\n                    success: true,\n                    data: result\n                });\n            })\n            .catch( (err) => {\n                res.json({\n                    success: false,\n                    data: err\n                });\n            });\n    });\n\n\n    /* DELETE remove a Course Type by ID. */\n    router.delete('/:id',  (req, res) => {\n        let subject = {\n            _id: req.params.id || ''\n        };\n\n        subjectsController.validate(subject, utils.OPERATION_STATUS.DELETE)\n            .then( (psubject) => {\n                return subjectsController.removeById(psubject['_id']);\n            })\n            .then( (result) => {\n                if (result) {\n                    res.json({\n                        success: true,\n                        data: result\n                    });\n                } else {\n                    res.status(404).json({\n                        success: false,\n                        data: '404 - Not Found'\n                    });\n                }\n            })\n            .catch( (err) => {\n                res.json({\n                    success: false,\n                    data: err\n                });\n            });\n    });\n\n    return router;\n};"]}