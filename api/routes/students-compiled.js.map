{"version":3,"sources":["students.js"],"names":[],"mappings":"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","file":"students-compiled.js","sourcesContent":["/**\n * Created by jonathan on 06/03/16.\n */\n'use strict';\n\nmodule.exports =  (express, io) => {\n\n    const router = express.Router();\n    const auth = require('../auth/auth');\n    const studentsController = require('../controller/students-controller');\n    const utils = require('../utils/utils');\n\n    io.on('connection', (socket)=> {\n        console.log('Connection on Students');\n        /*socket.on('big', ()=> {\n         console.log('big');\n         });\n         socket.emit('get', { 'get':'Express' });*/\n    });\n\n    /* Middleware for authentication */\n    router.use( (req, res, next) => {\n        return auth.ensureAuthenticated(req, res, next);\n    });\n\n    /* GET student listing. */\n    router.get('/',  (req, res) => {\n        studentsController.list()\n            .then( (students) => {\n                res.json({\n                    success: true,\n                    data: students\n                });\n            })\n            .catch( (err) => {\n                res.json({\n                    success: false,\n                    data: err\n                });\n            });\n\n    });\n\n    /* GET student by ID. */\n    router.get('/:id',  (req, res) => {\n        let student = {\n            _id: req.params.id || ''\n        };\n\n        studentsController.validate(student, utils.OPERATION_STATUS.SELECT)\n            .then( (rstudent) => {\n                return studentsController.getById(rstudent['_id']);\n            })\n            .then( (students) => {\n                if (students) {\n                    res.json({\n                        success: true,\n                        data: students\n                    });\n                } else {\n                    res.status(404).json({\n                        success: false,\n                        data: '404 - Not Found'\n                    });\n                }\n            })\n            .catch( (err) => {\n                res.json({\n                    success: false,\n                    data: err\n                });\n            });\n    });\n\n    /* POST create a student */\n    router.post('/',  (req, res) => {\n        let student = {\n            identify: req.body.identify || '',\n            name: req.body.name || '',\n            gender: req.body.gender || '',\n            dob: req.body.dob || '',\n            active: req.body.active || '1',\n            social_number: req.body.social_number || ''\n        };\n\n        studentsController.validate(student, utils.OPERATION_STATUS.NEW)\n            .then(studentsController.create)\n            .then( (student) => {\n                res.json({\n                    success: true,\n                    data: student\n                });\n            })\n            .catch( (err) => {\n                res.json({\n                    success: false,\n                    data: err\n                });\n            });\n    });\n\n    /* PUT update a student */\n    router.put('/',  (req, res) => {\n        let student = {\n            _id: req.body._id || '',\n            identify: req.body.identify || '',\n            name: req.body.name || '',\n            gender: req.body.gender || '',\n            dob: req.body.dob || '',\n            active: req.body.active || '1',\n            social_number: req.body.social_number || ''\n        };\n\n        studentsController.validate(student, utils.OPERATION_STATUS.UPDATE)\n            .then(studentsController.update)\n            .then( (student) => {\n                res.json({\n                    success: true,\n                    data: student\n                });\n            })\n            .catch( (err) => {\n                res.json({\n                    success: false,\n                    data: err\n                });\n            });\n    });\n\n\n    /* DELETE remove a student. */\n    router.delete('/:id',  (req, res) => {\n        let student = {\n            _id: req.params.id || ''\n        };\n\n\n        studentsController.validate(student, utils.OPERATION_STATUS.DELETE)\n            .then( (rstudent) => {\n                return studentsController.removeById(rstudent['_id']);\n            })\n            .then( (student) => {\n                if (student) {\n                    res.json({\n                        success: true,\n                        data: student\n                    });\n                } else {\n                    res.status(404).json({\n                        success: false,\n                        data: '404 - Not Found'\n                    });\n                }\n            })\n            .catch( (err) => {\n                res.json({\n                    success: false,\n                    data: err\n                });\n            });\n    });\n\n    return router;\n};"]}