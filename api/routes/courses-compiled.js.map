{"version":3,"sources":["courses.js"],"names":[],"mappings":"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","file":"courses-compiled.js","sourcesContent":["/**\n * Created by jonathan on 01/03/16.\n */\n'use strict';\nmodule.exports =  (express, io) => {\n\n    const router            = express.Router();\n    const auth              = require('../auth/auth');\n    const coursesController = require('../controller/courses-controller');\n    const classController   = require('../controller/class-controller');\n    const utils             = require('../utils/utils');\n\n    io.on('connection', (socket) => {\n        console.log('Connection on Courses');\n        /*socket.on('big', ()=> {\n         console.log('big');\n         });\n         socket.emit('get', { 'get':'Express' });*/\n    });\n\n    /* Middleware for authentication */\n    router.use( (req, res, next) => {\n        return auth.ensureAuthenticated(req, res, next);\n    });\n\n    /* GET Course listing. */\n    router.get('/',  (req, res) => {\n        coursesController.listCourses()\n            .then( (courses) => {\n                res.json({\n                    success: true,\n                    data: courses\n                });\n            })\n            .catch( (err) => {\n                res.json({\n                    success: false,\n                    data: err\n                });\n            });\n\n    });\n\n    /* GET Course by ID. */\n    router.get('/:id',  (req, res) => {\n        let course = {\n            _id: req.params.id || ''\n        };\n\n        coursesController.validateCourse(course, utils.OPERATION_STATUS.SELECT)\n            .then( (rcourse) => {\n                return coursesController.getById(rcourse['_id']);\n            })\n            .then( (result) => {\n                if (result) {\n                    res.json({\n                        success: true,\n                        data: result\n                    });\n                } else {\n                    res.status(404).json({\n                        success: false,\n                        data: '404 - Not Found'\n                    });\n                }\n            })\n            .catch( (err) => {\n                res.json({\n                    success: false,\n                    data: err\n                });\n            });\n    });\n\n    /* POST create a Course */\n    router.post('/',  (req, res) => {\n        let duration = {\n            start: '',\n            end: ''\n        };\n\n        let course_type = {\n            _id: '',\n            description: ''\n        };\n\n        course_type._id = (req.body.course_type && req.body.course_type._id || '');\n        course_type.description = (req.body.course_type && req.body.course_type.description || '');\n        duration.start = (req.body.duration && req.body.duration.start || '');\n        duration.end = (req.body.duration && req.body.duration.end || '');\n\n\n        let course = {\n            identify: req.body.identify || '',\n            name: req.body.name || '',\n            description: req.body.description || '',\n            active: req.body.active || '0',\n            duration: duration,\n            course_type: course_type\n        };\n\n        coursesController.validateNewCourse(course)\n            .then(coursesController.createCourse)\n            .then( (result) => {\n                res.json({\n                    success: true,\n                    data: result\n                });\n            })\n            .catch( (err) => {\n                res.json({\n                    success: false,\n                    data: err\n                });\n            });\n    });\n\n\n    /* PUT update a Course */\n    router.put('/',  (req, res) => {\n        let duration = {\n            start: '',\n            end: ''\n        };\n\n        let course_type = {\n            _id: '',\n            description: ''\n        };\n\n        course_type._id = (req.body.course_type && req.body.course_type._id || '');\n        course_type.description = (req.body.course_type && req.body.course_type.description || '');\n        duration.start = (req.body.duration && req.body.duration.start || '');\n        duration.end = (req.body.duration && req.body.duration.end || '');\n\n\n        var course = {\n            _id: req.body._id || '',\n            identify: req.body.identify || '',\n            name: req.body.name || '',\n            description: req.body.description || '',\n            active: req.body.active || '0',\n            duration: duration,\n            course_type: course_type\n        };\n\n        coursesController.validateUpdateCourse(course)\n            .then(coursesController.updateCourse)\n            .then((result) => {\n                res.json({\n                    success: true,\n                    data: result\n                });\n            })\n            .catch((err) => {\n                res.json({\n                    success: false,\n                    data: err\n                });\n            });\n    });\n\n\n    /* DELETE remove a Course by ID. */\n    router.delete('/:id',  (req, res) => {\n        let course = {\n            _id: req.params.id || ''\n        };\n\n        coursesController.validateCourse(course, utils.OPERATION_STATUS.DELETE)\n            .then( (rcourse) => {\n                return coursesController.removeById(rcourse['_id'])\n            })\n            .then( (result) => {\n                if (result) {\n                    res.json({\n                        success: true,\n                        data: result\n                    });\n                } else {\n                    res.status(404).json({\n                        success: false,\n                        data: '404 - Not Found'\n                    });\n                }\n\n            })\n            .catch( (err) => {\n                res.json({\n                    success: false,\n                    data: err\n                });\n            });\n    });\n\n    /* POST add a Course Subject. */\n    router.post('/:id/add-subject',  (req, res) => {\n        let subject = {\n            _id: req.params.id || '',\n            teacher: req.body.teacher || '',\n            subject: req.body.subject || '',\n            schedule: []\n        };\n\n        coursesController.addSubject(subject)\n            .then( (course) => {\n                res.json({\n                    success: true,\n                    data: course\n                });\n            })\n            .catch( (err) => {\n                res.json({\n                    success: false,\n                    data: err\n                });\n            });\n    });\n\n\n    /* DELETE remove a Course subject. */\n    router.delete('/:id/remove-subject/:idsubject',  (req, res) => {\n        let subject = {\n            _id: req.params.id || '',\n            _idsubject: req.params.idsubject || ''\n        };\n\n        coursesController.removeSubject(subject)\n            .then( (course) => {\n                res.json({\n                    success: true,\n                    data: course\n                });\n            })\n            .catch( (err) => {\n                res.json({\n                    success: false,\n                    data: err\n                });\n            });\n    });\n\n    /* POST add a Course schedule. */\n    router.post('/:id/add-schedule',  (req, res) => {\n        let duration = {\n            start: '',\n            end: ''\n        };\n\n        duration.start = (req.body.duration && req.body.duration.start || '');\n        duration.end = (req.body.duration && req.body.duration.end || '');\n\n        let item = {\n            _id: req.params.id || '',\n            day: req.body.day || '',\n            subject: req.body.subject || '',\n            duration: duration\n        };\n\n\n        coursesController.addSchedule(item)\n            .then( (course) => {\n                res.json({\n                    success: true,\n                    data: course\n                });\n            })\n            .catch( (err) => {\n                if (err === 404) {\n                    res.status(404).json({\n                        success: false,\n                        data: '404 - Not Found'\n                    });\n                }\n                else {\n                    res.json({\n                        success: false,\n                        data: err\n                    });\n                }\n            });\n    });\n\n    /* DELETE remove a Course schedule. */\n    router.delete('/:id/remove-schedule/:idsubject/item/:idschedule/',  (req, res) => {\n        let item = {\n            _id: req.params.id || '',\n            _idschedule: req.params.idschedule || '',\n            _idsubject: req.params.idsubject || ''\n        };\n\n        coursesController.removeSchedule(item)\n            .then( (course) => {\n                res.json({\n                    success: true,\n                    data: course\n                });\n            })\n            .catch( (err) => {\n                res.json({\n                    success: false,\n                    data: err\n                });\n            });\n    });\n\n    /* POST add a class. */\n    router.post('/:id/add-class',  (req, res) => {\n        let roomClass = {\n            _id: req.params.id || '',\n            class: []\n        };\n\n        roomClass.class = req.body.class || [];\n\n        classController.createClass(roomClass)\n            .then( (course) => {\n                res.json({\n                    success: true,\n                    data: course\n                });\n            })\n            .fail( (err) => {\n                res.json({\n                    success: false,\n                    data: err\n                });\n            });\n    });\n\n    /* DELETE deactivate a student. */\n    router.delete('/:id/deactive-student/:idstudent',  (req, res) => {\n        let roomClass = {\n            _id: req.params.id || '',\n            _idstudent: req.params.idstudent || ''\n        };\n\n\n        classController.deactiveStudent(roomClass)\n            .then( (course) => {\n                res.json({\n                    success: true,\n                    data: course\n                });\n            })\n            .fail( (err) => {\n                res.json({\n                    success: false,\n                    data: err\n                });\n            });\n    });\n\n    /* DELETE deactivate a student. */\n    router.post('/:id/activate-student',  (req, res) => {\n        let roomClass = {\n            _id: req.params.id || '',\n            _idstudent: req.body._idstudent || ''\n        };\n\n\n        classController.activateStudent(roomClass)\n            .then( (course) => {\n                res.json({\n                    success: true,\n                    data: course\n                });\n            })\n            .fail( (err) => {\n                res.json({\n                    success: false,\n                    data: err\n                });\n            });\n    });\n\n    router.get('/:id/subjects',  (req, res) => {\n        let course = {\n            _id: req.params.id || ''\n        };\n\n        coursesController.validateCourse(course, utils.OPERATION_STATUS.SELECT)\n            .then( (rcourse) => {\n                return coursesController.getCourseSubjects(rcourse['_id'])\n            })\n            .then( (result) => {\n                if (result) {\n                    res.json({\n                        success: true,\n                        data: result\n                    });\n                } else {\n                    res.status(404).json({\n                        success: false,\n                        data: '404 - Not Found'\n                    });\n                }\n            })\n            .catch( (err) => {\n                res.json({\n                    success: false,\n                    data: err\n                });\n            });\n    });\n\n\n    return router;\n};\n"]}