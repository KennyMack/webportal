{"version":3,"sources":["course-type.js"],"names":[],"mappings":"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","file":"course-type-compiled.js","sourcesContent":["/**\n * Created by jonathan on 01/03/16.\n */\n'use strict';\n\nmodule.exports =  (express, io)  => {\n  const courseTypeController = require('../controller/course-type-controller');\n  const router = express.Router();\n  const auth = require('../auth/auth');\n  const utils = require('../utils/utils');\n\n  io.on('connection', (socket) => {\n    console.log('Connection on Course-Type');\n    /*socket.on('big', () => {\n     console.log('big');\n     });\n     socket.emit('get', { 'get':'Express' });*/\n  });\n\n  /* Middleware for authentication */\n  router.use((req, res, next)  => {\n    return auth.ensureAuthenticated(req, res, next);\n  });\n\n  /* GET Course Type listing. */\n  router.get('/', (req, res)  => {\n    courseTypeController.listCoursesType()\n        .then((coursesType)  => {\n          res.json({\n            success: true,\n            data: coursesType\n          });\n        })\n        .catch((err)  => {\n          res.json({\n            success: false,\n            data: err\n          });\n        });\n  });\n\n  /* GET Course Type by ID. */\n  router.get('/:id', (req, res)  => {\n    let courseType = {\n      _id: req.params.id || ''\n    };\n\n    courseTypeController.validateCourseType(courseType, utils.OPERATION_STATUS.SELECT)\n      .then((coursetype) => {\n        return courseTypeController.getById(coursetype['_id']);\n      })\n      .then((result) => {\n        if (result) {\n          res.json({\n            success: true,\n            data: result\n          });\n        } else {\n          res.status(404).json({\n            success: false,\n            data: '404 - Not Found'\n          });\n        }\n      })\n      .catch((err)  => {\n        res.json({\n          success: false,\n          data: err\n        });\n      });\n  });\n\n  /* POST create a Course Type */\n  router.post('/', (req, res)  => {\n    let courseType = {\n      description: req.body.description || ''\n    };\n\n    courseTypeController.validateCourseType(courseType, utils.OPERATION_STATUS.NEW)\n      .then(courseTypeController.createCourseType)\n      .then((result) => {\n          res.json({\n            success: true,\n            data: result\n          });\n      })\n      .catch((err) => {\n        res.json({\n          success: false,\n          data: err\n        });\n      });\n  });\n\n  /* PUT update a Course Type */\n  router.put('/', (req, res)  => {\n    let courseType = {\n      _id: req.body._id || '',\n      description: req.body.description || ''\n    };\n\n    courseTypeController.validateCourseType(courseType, utils.OPERATION_STATUS.UPDATE)\n      .then(courseTypeController.updateCourseType)\n      .then((result)=>{\n          res.json({\n            success: true,\n            data: result\n          });\n      })\n      .catch((err) => {\n          res.json({\n            success: false,\n            data: err\n          });\n      });\n  });\n\n\n  /* DELETE remove a Course Type by ID. */\n  router.delete('/:id', (req, res)  => {\n    var courseType = {\n      _id: req.params.id || ''\n    };\n\n    courseTypeController.validateCourseType(courseType, utils.OPERATION_STATUS.DELETE)\n      .then((coursetype) => {\n        return courseTypeController.removeById(coursetype['_id']);\n      })\n      .then((result) => {\n        if (result) {\n          res.json({\n            success: true,\n            data: result\n          });\n        } else {\n          res.status(404).json({\n            success: false,\n            data: '404 - Not Found'\n          });\n        }\n      })\n      .catch((err)  => {\n        res.json({\n          success: false,\n          data: err\n        });\n      });\n  });\n\n  return router;\n};"]}