{"version":3,"sources":["users-controller.js"],"names":[],"mappings":"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","file":"users-controller-compiled.js","sourcesContent":["/**\n * Created by jonathan on 21/02/16.\n */\n'use strict';\n\nconst usersModel = require('../models/users-model');\nconst validator  = require('validator');\nconst utils      = require('../utils/utils');\n\n// List all Users\nmodule.exports.listUsers = () => {\n    return new Promise((resolve, reject) => {\n        usersModel.users.find({}).exec()\n            .then(resolve, reject);\n    });\n};\n\n// Get User By Id\nmodule.exports.getUserById = (id)=> {\n    return new Promise((resolve, reject) => {\n        usersModel.users.findById(id).exec()\n            .then(resolve, reject);\n    });\n};\n\n// Get User By Id\nmodule.exports.getUserByIdAllPath = (id)=> {\n    return new Promise((resolve, reject) => {\n        usersModel.users.findById(id)\n            .populate('student_id', 'name')\n            .populate('teachers_id', 'name')\n            .populate('master_id', 'name')\n            .populate('manager_id', 'name')\n            .exec()\n            .then(resolve, reject);\n    });\n};\n\n// Get User By UserName\nmodule.exports.getUserByUserName = (username)=> {\n    return new Promise( (resolve, reject) => {\n        usersModel.users.findOne({ username: username }).exec()\n            .then(resolve, reject);\n    });\n};\n\n// Get User By Email\nmodule.exports.getUserByEmail = (email)=> {\n    return new Promise( (resolve, reject) => {\n        usersModel.users.findOne({ email: email }).exec()\n            .then(resolve, reject);\n    });\n};\n\n// Remove User By Id\nmodule.exports.removeById = (id) => {\n    return new Promise((resolve, reject) => {\n        usersModel.users.findByIdAndRemove(id).exec()\n            .then(resolve, reject);\n    });\n};\n\n// Create a new User\nmodule.exports.createUser = (user) => {\n    return new Promise((resolve, reject) => {\n        new usersModel.users({\n            'email': user['email'],\n            'username': user['username'],\n            'password': user['password'],\n            'active': user['active']\n        }).save()\n            .then(resolve, reject);\n    });\n};\n\n// Update a User\nmodule.exports.updateUser =  (user) => {\n    return new Promise((resolve, reject) => {\n        let query = {_id: user['_id']};\n        let data = {\n            'username': user['username'],\n            'password': user['password'],\n            'email': user['email'],\n            'active': user['active']\n        };\n\n        usersModel.users.findOneAndUpdate(query, data, {upsert: false, new: true}).exec()\n            .then(resolve, reject);\n    });\n};\n\n// Update last Login\nmodule.exports.updateLastLogin =  (id) => {\n    return new Promise( (resolve, reject) => {\n        let query = { '_id': id};\n        let data = {\n            $set: {\n                last_login: utils.getCurrentDateTime()\n            }\n        };\n        let options = { upsert: false };\n\n        usersModel.users.findOneAndUpdate(query, data, options,  (err, data) => {\n            if(err) {\n                reject(err);\n            }\n            else{\n                resolve(data);\n            }\n        });\n    });\n};\n\n// Define a Person in user\nmodule.exports.setLoginPerson = (user) => {\n    return new Promise((resolve, reject)=> {\n        user['_id'] = validator.trim(validator.escape(user['_id'].toString() || ''));\n        user['idparent'] = validator.trim(validator.escape(user['idparent'].toString() || ''));\n        user['type'] = validator.trim(validator.escape(user['type'].toString() || ''));\n\n        let objRet = {};\n\n        let typeNull = validator.isNull(user['type']);\n        let idUserNull = validator.isNull(user['_id']);\n        let idParentNull = validator.isNull(user['idparent']);\n\n        if (typeNull)\n            objRet['type'] = 'Tipo do usuário é de preenchimento obrigatório.';\n\n        if (!typeNull && (!validator.isIn(user['type'], ['student', 'teacher', 'manager', 'master'])))\n            objRet['type'] = 'Tipo do usuário informado não é válido.';\n\n        if (idUserNull)\n            objRet['_id'] = 'Id do usuário é de preenchimento obrigatório.';\n\n        if (!idUserNull && (!validator.isMongoId(user['_id'])))\n            objRet['_id'] = 'Id do usuário informado é inválido.';\n\n        if (idParentNull)\n            objRet['idparent'] = 'Id da pessoa é de preenchimento obrigatório.';\n\n        if (!idParentNull && (!validator.isMongoId(user['idparent'])))\n            objRet['idparent'] = 'Id da pessoa informado é inválido.';\n\n        if (Object.keys(objRet).length !== 0) {\n            reject(objRet);\n        }\n        else {\n            let query = {_id: user['_id']};\n            let data = {};\n\n            if (user['type'].toString() === 'student') {\n                data = {\n                    $set: {\n                        \"student_id\": user['idparent']\n                    }\n                };\n            }\n            else if (user['type'].toString() === 'teacher') {\n                data = {\n                    $set: {\n                        \"teachers_id\": user['idparent']\n                    }\n                };\n            }\n            else if (user['type'].toString() === 'manager') {\n                data = {\n                    $set: {\n                        \"manager_id\":  user['idparent']\n                    }\n                };\n            }\n            else if (user['type'].toString() === 'master') {\n                data = {\n                    $set: {\n                        \"master_id\": user['idparent']\n                    }\n                };\n            }\n\n            let options = { safe: true, upsert: false, new: true };\n            usersModel.users.findOneAndUpdate(query, data, options,  (err, data) => {\n                if (err) {\n                    reject(err);\n                }\n                else {\n                    resolve(data);\n                }\n            });\n        }\n    });\n};\n\nmodule.exports.validateUser =  (user, status) => {\n    return new Promise((resolve, reject) => {\n        let objRet = {};\n\n        if (status !== utils.OPERATION_STATUS.DELETE &&\n            status !== utils.OPERATION_STATUS.SELECT ) {\n            user['username'] = validator.trim(validator.escape(user['username'].toString() || ''));\n            user['email'] = validator.trim(validator.escape(user['email'].toString() || ''));\n            user['password'] = validator.trim(validator.escape(user['password'].toString() || ''));\n            user['active'] = validator.trim(validator.escape(user['active'].toString() || '0'));\n\n\n            if (validator.isNull(user['username']))\n                objRet['username'] = 'Usuário é de preenchimento obrigatório.';\n\n            if (validator.isNull(user['password']))\n                objRet['password'] = 'Senha é de preenchimento obrigatório.';\n\n            let emailNull = validator.isNull(user['email']);\n\n            if (emailNull)\n                objRet['email'] = 'Email é de preenchimento obrigatório.';\n\n            if (!emailNull && (!validator.isEmail(user['email'])))\n                objRet['email'] = 'Email informado não é válido.';\n\n            let activeNull = validator.isNull(user['active']);\n\n            if (!activeNull && (!validator.isIn(user['active'], [0, 1])))\n                objRet['active'] = 'Status informado não é válido.';\n\n            if (status === utils.OPERATION_STATUS.NEW) {\n                user['passwordbis'] = validator.trim(validator.escape(user['passwordbis'].toString() || ''));\n                if ((!validator.isNull(user['password'])) &&\n                    (validator.isNull(user['passwordbis'])))\n                    objRet['passwordbis'] = 'Confirmação da senha é de preenchimento obrigatório.';\n\n                if ((!validator.isNull(user['passwordbis'])) &&\n                    (!validator.isNull(user['password'])) &&\n                    (!validator.equals(user['password'], user['passwordbis']))) {\n                    objRet['passwordValid'] = 'Senhas não coincidem.';\n                }\n            }\n        }\n\n        if (status === utils.OPERATION_STATUS.UPDATE ||\n            status === utils.OPERATION_STATUS.SELECT ||\n            status === utils.OPERATION_STATUS.DELETE) {\n            user['_id'] = validator.trim(validator.escape(user['_id'].toString() || ''));\n\n            let idNull = validator.isNull(user['_id']);\n\n            if (idNull)\n                objRet['_id'] = 'Id do usuário é de preenchimento obrigatório.';\n\n            if (!idNull && (!validator.isMongoId(user['_id'])))\n                objRet['_id'] = 'Id do usuário informado é inválido.';\n        }\n\n        if (Object.keys(objRet).length !== 0) {\n            reject(objRet);\n        }\n        else {\n            resolve(user);\n        }\n    });\n\n};\n\n\n"]}