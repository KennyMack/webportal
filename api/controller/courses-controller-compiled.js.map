{"version":3,"sources":["courses-controller.js"],"names":[],"mappings":"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","file":"courses-controller-compiled.js","sourcesContent":["/**\n * Created by jonathan on 01/03/16.\n */\n'use strict';\nconst coursesModel = require('../models/courses-model');\nconst validator    = require('validator');\nconst utils        = require('../utils/utils');\nconst moment       = require('moment');\n\n// List all Courses\nmodule.exports.listCourses = () => {\n    return new Promise( (resolve, reject) => {\n        coursesModel.courses.find({})\n            .populate('subjects.teacher', 'name')\n            .populate('subjects.subject', 'description')\n            .exec()\n            .then(resolve, reject);\n    });\n};\n\n// Get Course By Id\nmodule.exports.getById = (id) => {\n    return new Promise( (resolve, reject) => {\n        coursesModel.courses.findById(id)\n            .populate('subjects.teacher', 'name')\n            .populate('subjects.subject', 'description')\n            .exec()\n            .then(resolve, reject);\n    });\n};\n\n// Get Subjects in Course\nmodule.exports.getCourseSubjects =  (id) => {\n    return new Promise( (resolve, reject) => {\n        coursesModel.courses.findById(id)\n            .select('subjects.subject')\n            .populate('subjects.subject', 'description')\n            .exec()\n            .then(resolve, reject);\n    });\n};\n\n// Remove Course By Id\nmodule.exports.removeById = (id) => {\n    return new Promise( (resolve, reject) => {\n        coursesModel.courses.findByIdAndRemove(id).exec()\n            .then(resolve, reject);\n    });\n};\n\n// Create a Course\nmodule.exports.createCourse = (course) => {\n    return new Promise( (resolve, reject) => {\n        new coursesModel.courses({\n            'identify': course['identify'],\n            'name': course['name'],\n            'description': course['description'],\n            'active': course['active'],\n            'duration': {\n                'start': course['duration']['start'],\n                'end': course['duration']['end']\n            },\n            course_type: {\n                '_id': course['course_type']['_id'],\n                'description': course['course_type']['description']\n            }\n\n        }).save()\n            .then(resolve, reject);\n    });\n};\n\n// Update a Course\nmodule.exports.updateCourse =  (course) => {\n    return new Promise( (resolve, reject) => {\n        let query = { _id: course['_id'] };\n        let data = {\n            'identify': course['identify'],\n            'name': course['name'],\n            'description': course['description'],\n            'active': course['active'],\n            'duration': {\n                'start': course['duration']['start'],\n                'end': course['duration']['end']\n            },\n            'course_type':  {\n                '_id': course['course_type']['_id'],\n                'description': course['course_type']['description']\n            }\n        };\n\n        coursesModel.courses.findOneAndUpdate(query, data, { upsert: false, new: true },  (err, data) => {\n            if (err)\n                reject(err);\n            else\n                resolve(data);\n        });\n    });\n};\n\n// Validate Subject\nconst validateSubject =  (subject, status) => {\n    return new Promise( (resolve, reject) => {\n        let objRet = {};\n        if (status === utils.OPERATION_STATUS.NEW) {\n\n            subject['teacher'] = validator.trim(validator.escape(subject['teacher'].toString() || ''));\n            subject['subject'] = validator.trim(validator.escape(subject['subject'].toString() || ''));\n\n            if (validator.isNull(subject['teacher']))\n                objRet['teacher'] = 'Professor é de preenchimento obrigatório.';\n            else if (!validator.isMongoId(subject['teacher']))\n                objRet['teacher'] = 'Professor informado é inválido.';\n\n            if (validator.isNull(subject['subject']))\n                objRet['subject'] = 'Id da pessoa é de preenchimento obrigatório.';\n            else if (!validator.isMongoId(subject['subject']))\n                objRet['subject'] = 'Id da pessoa informado é inválido.';\n\n\n        }\n        if (status === utils.OPERATION_STATUS.DELETE){\n            subject['_idsubject'] = validator.trim(validator.escape(subject['_idsubject'].toString() || ''));\n            if (validator.isNull(subject['_idsubject']))\n                objRet['_idsubject'] = 'Id da materia é de preenchimento obrigatório.';\n            else if (!validator.isMongoId(subject['_idsubject']))\n                objRet['_idsubject'] = 'Id da materia informado é inválido.';\n        }\n\n        subject['_id'] = validator.trim(validator.escape(subject['_id'].toString() || ''));\n        if (validator.isNull(subject['_id']))\n            objRet['_id'] = 'Id do Curso é de preenchimento obrigatório.';\n        else if (!validator.isMongoId(subject['_id']))\n            objRet['_id'] = 'Id do Curso informado é inválido.';\n\n        if (Object.keys(objRet).length !== 0)\n            reject(objRet);\n        else\n            resolve(subject);\n    });\n};\n\n// Add subjects to Course\nmodule.exports.addSubject = (subject) => {\n    return new Promise( (resolve, reject) => {\n        validateSubject(subject, utils.OPERATION_STATUS.NEW)\n            .then(hasCourseSubject)\n            .then(addSubjectItem)\n            .then(resolve)\n            .catch( (err) => {\n                reject(err);\n            });\n\n    });\n};\n\n// verify wheater course has subject\nconst hasCourseSubject =  (subject) => {\n    return new Promise( (resolve, reject) => {\n        let query = {\n            _id: subject['_id'],\n            \"subjects.subject\": subject['subject']\n        };\n\n        coursesModel.courses.find(query,  (err, course) => {\n            if (err)\n                reject(err);\n            else\n                resolve({ subject: subject, course: course });\n        });\n    });\n};\n\n// add new subject to course\nconst addSubjectItem =  (course) => {\n    return new Promise( (resolve, reject) => {\n        if (course.course.length === 0) {\n            let query = { _id: course.subject['_id'] };\n            let options = { safe: true, upsert: false, new: true };\n            let data = {\n                $push: {\n                    \"subjects\": {\n                        teacher: course.subject.teacher,\n                        subject: course.subject.subject,\n                        schedule: []\n                    }\n                }\n            };\n            coursesModel.courses.findOneAndUpdate(query, data, options)\n                .populate('subjects.teacher', 'name')\n                .populate('subjects.subject', 'description')\n                .exec()\n                .then( (data) => {\n                    resolve(data);\n                },  (err) => {\n                    reject(err);\n                });\n        }\n        else {\n            reject({ subject : \"Matéria já vinculada neste curso.\" });\n        }\n    });\n};\n\n// Remove subjects of Course\nmodule.exports.removeSubject = (subject) => {\n    return new Promise( (resolve, reject) => {\n        validateSubject(subject, utils.OPERATION_STATUS.DELETE)\n            .then(removeSubjectItem)\n            .then(resolve)\n            .catch( (err) => {\n                reject(err);\n            });\n    });\n};\n\n// remove subject of course\nconst removeSubjectItem =  (subject) => {\n    return new Promise( (resolve, reject) => {\n        let query = { _id: subject['_id'] };\n        let data = {\n            $pull: {\n                \"subjects\": {\n                    _id: subject['_idsubject']\n                }\n            }\n        };\n        let options = { safe: true, upsert: false, new: true };\n        coursesModel.courses.findOneAndUpdate(query, data, options,  (err, data) => {\n            if (err) {\n                reject(err);\n            }\n            else {\n                resolve(data);\n            }\n        });\n    });\n};\n\n// Validate Schedule\nconst validateSchedule =  (item, status) => {\n    return new Promise( (resolve, reject) => {\n        let objRet = {};\n        if (status === utils.OPERATION_STATUS.NEW ||\n            status === utils.OPERATION_STATUS.UPDATE) {\n            item['day'] = validator.trim(validator.escape(item['day'].toString() || ''));\n            item['subject'] = validator.trim(validator.escape(item['subject'].toString() || ''));\n            item['duration']['start'] = validator.trim(item['duration']['start'].toString() || '');\n            item['duration']['end'] = validator.trim(item['duration']['end'].toString() || '');\n\n            if (validator.isNull(item['subject']))\n                objRet['subject'] = 'Id da matéria é de preenchimento obrigatório.';\n            else if (!validator.isMongoId(item['subject']))\n                objRet['subject'] = 'Id da matéria informado é inválido.';\n\n            if (validator.isNull(item['day']))\n                objRet['day'] = 'Dia da semana é de preenchimento obrigatório.';\n            else if (!validator.isInt(item['day']))\n                objRet['day'] = 'Dia da semana informado é inválido.';\n            else if (!validator.isIn(item['day'], [1, 2, 3, 4, 5, 6, 7]))\n                objRet['day'] = 'Dia da semana informado é inválido.';\n\n            if (validator.isNull(item['duration']['start']))\n                objRet['start'] = 'Data de início é de preenchimento obrigatório.';\n            else if (!validator.isDate(item['duration']['start']))\n                objRet['start'] = 'Data de início informada não é válida.';\n\n\n            if (validator.isNull(item['duration']['end']))\n                objRet['end'] = 'Data de término é de preenchimento obrigatório.';\n            else if (!validator.isDate(item['duration']['end']))\n                objRet['end'] = 'Data de término informada não é válida.';\n        }\n        if (status === utils.OPERATION_STATUS.DELETE) {\n\n            item['_idschedule'] = validator.trim(validator.escape(item['_idschedule'].toString() || ''));\n            if (validator.isNull(item['_idschedule']))\n                objRet['_idschedule'] = 'Id do item do cronograma é de preenchimento obrigatório.';\n            else if (!validator.isMongoId(item['_idschedule']))\n                objRet['_idschedule'] = 'Id do item do cronograma informado é inválido.';\n\n\n            item['_idsubject'] = validator.trim(validator.escape(item['_idsubject'].toString() || ''));\n            if (validator.isNull(item['_idsubject']))\n                objRet['_idsubject'] = 'Id da matéria é de preenchimento obrigatório.';\n            else if (!validator.isMongoId(item['_idsubject']))\n                objRet['_idsubject'] = 'Id da matéria informado é inválido.';\n        }\n\n        item['_id'] = validator.trim(validator.escape(item['_id'].toString() || ''));\n        if (validator.isNull(item['_id']))\n            objRet['_id'] = 'Id do Curso é de preenchimento obrigatório.';\n        else if (!validator.isMongoId(item['_id']))\n            objRet['_id'] = 'Id do Curso informado é inválido.';\n\n\n        if (Object.keys(objRet).length !== 0)\n            reject(objRet);\n        else {\n            objRet = null;\n            resolve(item);\n        }\n    });\n};\n\n// Add Schedule to Course\nmodule.exports.addSchedule =  (item) => {\n    return new Promise( (resolve, reject) => {\n        validateSchedule(item, utils.OPERATION_STATUS.NEW)\n            .then(existsCourse)\n            .then(getSchedules)\n            .then(validateDateScheduleItem)\n            .then( (result) => {\n                let course = result.course;\n                let item = result.item;\n                for (let i = 0, length = course.subjects.length; i < length; i++) {\n                    if (course.subjects[i].subject == item['subject']) {\n                        course.subjects[i].schedule.push({\n                            day: item['day'],\n                            subject: item['subject'],\n                            duration: {\n                                start: moment(item['duration']['start']).format('YYYY-MM-DD HH:mm:ss'),\n                                end: moment(item['duration']['end']).format('YYYY-MM-DD HH:mm:ss')\n                            }\n                        });\n                    }\n                }\n                return addSubjectSchedule(course);\n            })\n            .then(resolve)\n            .catch( (err) => {\n                reject(err);\n            })\n    });\n};\n\n// verify exists course\nconst existsCourse =  (item) => {\n    return new Promise( (resolve, reject) => {\n        coursesModel.courses.findById(item['_id']).exec()\n            .then( (course) => {\n                if (!course){\n                    reject(404);\n                }\n                else {\n                    resolve({\n                        item: item,\n                        course: course\n                    });\n                }\n            },\n             (err) => {\n                reject(err);\n            });\n\n    });\n};\n\n// get a list with course schedule\nconst getSchedules =  (item) => {\n    return new Promise( (resolve, reject) => {\n        coursesModel.courses\n            .aggregate([\n                {\n                    \"$project\": {\n                        \"_id\": 1, \"subjects\": 1\n                    }\n                },\n                {\n                    $unwind: '$subjects'\n                },\n                {\n                    \"$match\": {\n                        _id: coursesModel.getObjectId(item.item['_id'])\n                    }\n                },\n                {\n                    $unwind: \"$subjects.schedule\"\n                },\n                {\n                    \"$match\": {\n                        \"subjects.schedule.day\": parseInt(item.item['day'])\n                    }\n                },\n                {\n                    $group: {\n                        _id: '$_id',\n                        subjects: {\n                            $push: '$subjects.schedule'\n                        }\n                    }\n                }\n            ]).exec()\n            .then( (data) => {\n                resolve({\n                    item: item.item,\n                    course: item.course,\n                    schedule: data\n                });\n            },  (err) => {\n                reject(err);\n            });\n\n    });\n};\n\n// save new Schedule\nconst addSubjectSchedule =  (course) => {\n    return new Promise( (resolve, reject) => {\n        let query = {_id: course._id};\n\n        let options = {safe: true, upsert: false, new: true};\n        coursesModel.courses.findOneAndUpdate(query, course, options)\n            .populate('subjects.teacher', 'name')\n            .populate('subjects.subject', 'description')\n            .exec()\n            .then( (data) => {\n                resolve(data);\n            },  (err) => {\n                reject(err);\n            });\n    });\n};\n\n// validate Date Schedule Item\nconst validateDateScheduleItem =  (course) => {\n    return new Promise( (resolve, reject) => {\n        let objRet = {};\n        let candidateScheduleItem = {\n            start: moment(course.item['duration']['start']).format('HH:mm:ss'),\n            end: moment(course.item['duration']['end']).format('HH:mm:ss')\n        };\n        if (candidateScheduleItem.start >= candidateScheduleItem.end) {\n            objRet['duration'] = 'Período informado é inválido.';\n        }\n        else {\n            let schedule = course.schedule;\n            if (schedule.length > 0) {\n                for (let i = 0, length = schedule[0].subjects.length; i < length; i++) {\n                    let scheduleItem = {\n                        start: moment(schedule[0].subjects[i].duration.start).format('HH:mm:ss'),\n                        end: moment(schedule[0].subjects[i].duration.end).format('HH:mm:ss')\n                    };\n\n                    if (utils.betweenII(candidateScheduleItem.start, scheduleItem.start, scheduleItem.end)) {\n                        objRet['start'] = 'Já existe outra matéria vinculada neste Horário.';\n                    }\n\n                    if (utils.betweenII(candidateScheduleItem.end, scheduleItem.start, scheduleItem.end)) {\n                        objRet['end'] = 'Já existe outra matéria vinculada neste Horário.';\n                    }\n\n                    if (utils.betweenII(scheduleItem.start, candidateScheduleItem.start, candidateScheduleItem.end)) {\n                        objRet['end'] = 'Já existe outra matéria vinculada neste Horário.';\n                    }\n\n                    if (utils.betweenII(scheduleItem.end, candidateScheduleItem.start, candidateScheduleItem.end)) {\n                        objRet['end'] = 'Já existe outra matéria vinculada neste Horário.';\n                    }\n\n                    scheduleItem = null;\n\n                    if (Object.keys(objRet).length !== 0) {\n                        break;\n                    }\n                }\n            }\n        }\n        if (Object.keys(objRet).length !== 0) {\n            reject(objRet);\n        }\n        else {\n            resolve({ item: course.item, course: course.course });\n        }\n        objRet = null;\n        candidateScheduleItem = null;\n\n    });\n};\n\n// Remove Schedule to Course\nmodule.exports.removeSchedule = (item) => {\n    return new Promise( (resolve, reject) => {\n        validateSchedule(item, utils.OPERATION_STATUS.DELETE)\n            .then(existsCourse)\n            .then(removeScheduleItem)\n            .then(resolve)\n            .catch(reject);\n    });\n};\n\n// remove subject of course\nconst removeScheduleItem =  (schedule) => {\n    return new Promise( (resolve, reject) => {\n        let course = schedule.course;\n        let item = schedule.item;\n        let query = { _id: item._id };\n        for (let i = 0, lenSubject = course.subjects.length;  i < lenSubject; i++) {\n            if (course.subjects[i].subject == item['_idsubject']) {\n                for (let r = 0, lenSchedule = course.subjects[i].schedule.length; r < lenSchedule; r++) {\n                    if (course.subjects[i].schedule[r]._id == item['_idschedule']) {\n                        course.subjects[i].schedule.splice(r, 1);\n                        break;\n                    }\n\n                }\n            }\n        }\n        let options = { safe: true, upsert: false, new: true };\n        coursesModel.courses.findOneAndUpdate(query, course, options,  (err, data) => {\n            if (err) {\n                reject(err);\n            }\n            else {\n                resolve(data);\n            }\n        });\n    });\n};\n\n// Validate fields\nconst validateCourse =  (course, status) => {\n    return new Promise( (resolve, reject) => {\n\n        let objRet = {};\n\n        if (status !== utils.OPERATION_STATUS.DELETE &&\n            status !== utils.OPERATION_STATUS.SELECT) {\n            course['identify'] = validator.trim(validator.escape(course['identify'].toString() || ''));\n            course['name'] = validator.trim(validator.escape(course['name'].toString() || ''));\n            course['active'] = validator.trim(validator.escape(course['active'].toString() || ''));\n            course['description'] = validator.trim(validator.escape(course['description'].toString() || ''));\n            course['duration']['start'] = validator.trim(course['duration']['start'].toString() || '');\n            course['duration']['end'] = validator.trim(course['duration']['end'].toString() || '');\n            course['course_type']['_id'] = validator.trim(validator.escape(course['course_type']['_id'].toString() || ''));\n            course['course_type']['description'] = validator.trim(validator.escape(course['course_type']['description'].toString() || ''));\n\n            if (validator.isNull(course['description']))\n                objRet['description'] = 'Descrição é de preenchimento obrigatório.';\n\n            if (validator.isNull(student['identify']))\n                objRet['identify'] = 'Identificador é de preenchimento obrigatório.';\n\n            if (validator.isNull(course['name']))\n                objRet['description'] = 'Nome do curso é de preenchimento obrigatório.';\n\n            if (validator.isNull(course['duration']['start']))\n                objRet['start'] = 'Data de início é de preenchimento obrigatório.';\n            else if (!validator.isDate(course['duration']['start']))\n                objRet['start'] = 'Data de início informada não é válida.';\n\n            if (validator.isNull(course['duration']['end']))\n                objRet['end'] = 'Data de término é de preenchimento obrigatório.';\n            else if (!validator.isDate(course['duration']['end']))\n                objRet['end'] = 'Data de término informada não é válida.';\n\n            if (validator.isNull(course['course_type']['description']))\n                objRet['course_type_description'] = 'Tipo do curso é de preenchimento obrigatório.';\n\n            if (validator.isNull(course['course_type']['_id']))\n                objRet['course_type__id'] = 'id do Tipo do curso é de preenchimento obrigatório.';\n            else if (!validator.isMongoId(course['course_type']['_id']))\n                objRet['course_type__id'] = 'id do Tipo do curso informado não é válida.';\n\n            if ((!validator.isNull(course['active'])) && (!validator.isIn(course['active'], [0, 1])))\n                objRet['active'] = 'Status informado não é válido.';\n\n        }\n\n        if (status === utils.OPERATION_STATUS.UPDATE ||\n            status === utils.OPERATION_STATUS.SELECT ||\n            status === utils.OPERATION_STATUS.DELETE) {\n            course['_id'] = validator.trim(validator.escape(course['_id'].toString() || ''));\n\n            let idNull = validator.isNull(course['_id']);\n\n            if (idNull)\n                objRet['_id'] = 'Id do curso é de preenchimento obrigatório.';\n            else if (!validator.isMongoId(course['_id']))\n                objRet['_id'] = 'Id do curso informado é inválido.';\n        }\n\n        if (Object.keys(objRet).length !== 0)\n            reject(objRet);\n        else {\n            objRet = null;\n            resolve(course);\n        }\n    });\n};\n\n// Validate Duration of course\nconst validateDate =  (course) => {\n    return new Promise( (resolve, reject) => {\n        if (course['duration']['start'] > course['duration']['end']){\n            reject( { duration : 'Período informado é inválido.'});\n        }\n        else\n            resolve(course);\n    });\n};\n\n// Validate a create Course\nmodule.exports.validateNewCourse =  (pcourse) => {\n    return new Promise( (resolve, reject) => {\n        validateCourse(pcourse, utils.OPERATION_STATUS.NEW)\n            .then(validateDate)\n            .then( (course) => {\n                course['duration']['start'] = moment(course['duration']['start'], 'YYYY-MM-DD HH:mm:ss').format('YYYY-MM-DD HH:mm:ss');\n                course['duration']['end'] = moment(course['duration']['end'], 'YYYY-MM-DD HH:mm:ss').format('YYYY-MM-DD HH:mm:ss');\n                resolve(course);\n            })\n            .catch( (err) => {\n                reject(err);\n            });\n\n    });\n\n};\n\n// Validate a update Course\nmodule.exports.validateUpdateCourse =  (pcourse) => {\n    return new Promise( (resolve, reject) => {\n        validateCourse(pcourse, utils.OPERATION_STATUS.UPDATE)\n            .then(validateDate)\n            .then( (course) => {\n                course['duration']['start'] = moment(course['duration']['start'], 'YYYY-MM-DD HH:mm:ss').format('YYYY-MM-DD HH:mm:ss');\n                course['duration']['end'] = moment(course['duration']['end'], 'YYYY-MM-DD HH:mm:ss').format('YYYY-MM-DD HH:mm:ss');\n                resolve(course);\n            })\n            .catch( (err) => {\n                reject(err);\n            });\n    });\n\n};\n\nmodule.exports.validateDate = validateDate;\nmodule.exports.validateCourse = validateCourse;\n"]}