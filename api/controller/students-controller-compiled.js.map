{"version":3,"sources":["students-controller.js"],"names":[],"mappings":"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","file":"students-controller-compiled.js","sourcesContent":["/**\n * Created by jonathan on 06/03/16.\n */\n'use strict';\nconst studentsModel = require('../models/students-model');\nconst validator     = require('validator');\nconst utils         = require('../utils/utils');\n\n\n// List all Students\nmodule.exports.list = () => {\n    return new Promise( (resolve, reject) => {\n        studentsModel.students.find({})\n            .exec()\n            .then(resolve, reject)\n    });\n};\n\n// Get Student By Id\nmodule.exports.getById = (id) => {\n    return new Promise( (resolve, reject) => {\n        studentsModel.students.findById(id)\n            .exec()\n            .then(resolve, reject)\n    });\n};\n\nmodule.exports.getByList =  (list) => {\n    return new Promise( (resolve, reject) => {\n        let query = {\n            '_id': {\n                $in: list\n            }\n        };\n        studentsModel.students.find(query)\n            .exec()\n            .then(resolve, reject)\n    });\n\n};\n\n// Remove Student By Id\nmodule.exports.removeById = (id) => {\n    return new Promise( (resolve, reject) => {\n        studentsModel.students.findByIdAndRemove(id)\n            .exec()\n            .then(resolve, reject)\n    });\n\n};\n\n// Create a Student\nmodule.exports.create = (student) => {\n    return new Promise( (resolve, reject) => {\n        new studentsModel.students({\n            'identify': student['identify'],\n            'name': student['name'],\n            'gender': student['gender'],\n            'dob': student['dob'],\n            'active': student['active'],\n            'social_number': student['social_number']\n        }).save()\n            .then(resolve, reject)\n    });\n};\n\n// Update a Student\nmodule.exports.update =  (student) => {\n    return new Promise( (resolve, reject) => {\n        let query = { _id: student['_id'] };\n        let data = {\n            'identify': student['identify'],\n            'name': student['name'],\n            'gender': student['gender'],\n            'dob': student['dob'],\n            'active': student['active'],\n            'social_number': student['social_number']\n        };\n\n\n        studentsModel.students.findOneAndUpdate(query, data, { upsert: false, new: true })\n            .exec()\n            .then(resolve, reject)\n    });\n};\n\nmodule.exports.validate =  (student, status) => {\n    return new Promise( (resolve, reject) => {\n        let objRet = {};\n\n        if (status !== utils.OPERATION_STATUS.DELETE &&\n            status !== utils.OPERATION_STATUS.SELECT) {\n            student['identify'] = validator.trim(validator.escape(student['identify'].toString() || ''));\n            student['name'] = validator.trim(validator.escape(student['name'].toString() || ''));\n            student['gender'] = validator.trim(validator.escape(student['gender'].toString() || ''));\n            student['dob'] = validator.trim(student['dob'].toString() || '');\n            student['social_number'] = validator.trim(validator.escape(student['social_number'].toString() || ''));\n            student['active'] = validator.trim(validator.escape(student['active'].toString() || ''));\n\n            if (validator.isNull(student['name']))\n                objRet['name'] = 'Nome é de preenchimento obrigatório.';\n\n            if (validator.isNull(student['identify']))\n                objRet['identify'] = 'Identificador é de preenchimento obrigatório.';\n\n            if (validator.isNull(student['gender']))\n                objRet['gender'] = 'Sexo é de preenchimento obrigatório.';\n            else if (!validator.isIn(student['gender'], ['M', 'F']))\n                objRet['gender'] = 'Sexo informado não é válido.';\n\n            if (validator.isNull(student['dob']))\n                objRet['dob'] = 'Data de nascimento é de preenchimento obrigatório.';\n            else if (!validator.isDate(student['dob']))\n                objRet['dob'] = 'Data de nascimento informada não é válida.';\n\n            if ((!validator.isNull(student['active'])) &&\n                (!validator.isIn(student['active'], [0, 1])))\n                objRet['active'] = 'Status informado não é válido.';\n\n\n        }\n\n        if (status === utils.OPERATION_STATUS.UPDATE ||\n            status === utils.OPERATION_STATUS.SELECT ||\n            status === utils.OPERATION_STATUS.DELETE) {\n            console.log('OPERATION_STATUS.DELETE');\n\n            student['_id'] = validator.trim(validator.escape(student['_id'].toString() || ''));\n\n            let idNull = validator.isNull(student['_id']);\n\n            if (idNull)\n                objRet['_id'] = 'Id do Aluno é de preenchimento obrigatório.';\n\n            if (!idNull && (!validator.isMongoId(student['_id'])))\n                objRet['_id'] = 'Id do Aluno informado é inválido.';\n        }\n\n        if (Object.keys(objRet).length !== 0) {\n            reject(objRet);\n        }\n        else {\n            resolve(student);\n        }\n\n    });\n\n};"]}