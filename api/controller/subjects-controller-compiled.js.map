{"version":3,"sources":["subjects-controller.js"],"names":[],"mappings":"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","file":"subjects-controller-compiled.js","sourcesContent":["/**\n * Created by jonathan on 03/03/16.\n */\n\n'use strict';\n\nconst subjectsModel = require('../models/subjects-model');\nconst validator     = require('validator');\nconst utils         = require('../utils/utils');\n\n// List all Teachers\nmodule.exports.list = () => {\n    return new Promise( (resolve, reject) => {\n        subjectsModel.subjects.find({})\n        .exec()\n        .then(resolve, reject);\n    });\n};\n\n// Get Teacher By Id\nmodule.exports.getById = (id) => {\n    return new Promise( (resolve, reject) => {\n        subjectsModel.subjects.findById(id)\n            .exec()\n            .then(resolve, reject);\n    });\n};\n\n// Remove Teacher By Id\nmodule.exports.removeById = (id) => {\n    return new Promise( (resolve, reject) => {\n        subjectsModel.subjects.findByIdAndRemove(id)\n            .exec()\n            .then(resolve, reject);\n    });\n\n};\n\n// Create a Teacher\nmodule.exports.create = (subject) => {\n    return new Promise( (resolve, reject) => {\n        new subjectsModel.subjects({\n            'description': subject['description']\n        }).save()\n            .then(resolve, reject);\n    });\n};\n\n// Update a Teacher\nmodule.exports.update =  (subject) => {\n    return new Promise( (resolve, reject) => {\n\n        let query = { _id: subject['_id'] };\n        let data = {\n            'description': subject['description']\n        };\n\n        subjectsModel.subjects.update(query, data, { upsert: false })\n            .exec()\n            .then(resolve, reject);\n    });\n};\n\n// Validate fields\nmodule.exports.validate =  (subject, status) => {\n    return new Promise( (resolve, reject) => {\n\n        let objRet = {};\n\n        if (status !== utils.OPERATION_STATUS.DELETE &&\n            status !== utils.OPERATION_STATUS.SELECT) {\n            subject['description'] = validator.trim(validator.escape(subject['description'].toString() || ''));\n\n            if (validator.isNull(subject['description']))\n                objRet['description'] = 'Descrição é de preenchimento obrigatório.';\n\n        }\n\n        if (status === utils.OPERATION_STATUS.UPDATE ||\n            status === utils.OPERATION_STATUS.SELECT ||\n            status === utils.OPERATION_STATUS.DELETE) {\n            subject['_id'] = validator.trim(validator.escape(subject['_id'].toString() || ''));\n\n            let idNull = validator.isNull(subject['_id']);\n\n            if (idNull)\n                objRet['_id'] = 'Id da matéria é de preenchimento obrigatório.';\n\n            if (!idNull && (!validator.isMongoId(subject['_id'])))\n                objRet['_id'] = 'Id da matéria informado não é válido.';\n        }\n        if (Object.keys(objRet).length !== 0) {\n            reject(objRet)\n        }\n        else {\n            resolve(subject);\n        }\n\n\n    });\n};"]}