{"version":3,"sources":["auth-controller.js"],"names":[],"mappings":"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","file":"auth-controller-compiled.js","sourcesContent":["/**\n * Created by jonathan on 25/02/16.\n */\n'use strict';\n\nconst userController = require('../controller/users-controller');\nconst auth           = require('../auth/auth');\nconst validator      = require('validator');\nconst crypt          = require('bcrypt');\n\nconst invalidLoginJSON = {\n    success: false,\n    data: \"Usuário e/ou senha inválido.\"\n};\n\nconst inativeUserJson = {\n    success: false,\n    data: \"Usuário informado está inátivo.\"\n};\n\nmodule.exports.verifyLoginUser = (user) => {\n    return new Promise((resolve, reject) => {\n        let userLogin = {\n            username: user['login'] || '',\n            password: user['password'] || ''\n        };\n        validateLogin(userLogin)\n            .then(getUser)\n            .then((user) => {\n                return comparePassword(userLogin, user);\n            })\n            .then((result) => {\n                if (result.match) {\n                    resolve(result.user);\n                }\n                else {\n                    reject(invalidLoginJSON);\n                }\n            })\n            .catch((err) => {\n                reject({\n                    success: false,\n                    data: err\n                });\n            });\n    });\n};\n\nconst getUser =  (userLogin) => {\n    if (validator.isEmail(userLogin.username))\n        return userController.getUserByEmail(userLogin.username);\n\n    return userController.getUserByUserName(userLogin.username);\n};\n\nmodule.exports.lastUpdateLogin = (user) => {\n    return new Promise((resolve, reject) => {\n        userController.updateLastLogin(user._id)\n            .then(resolve)\n            .catch((err) => {\n                reject({\n                    success: false,\n                    data: err\n                });\n            });\n    });\n};\n\nmodule.exports.loginUser = (user) => {\n    return new Promise((resolve, reject)  => {\n        if (user.active) {\n            let token = auth.getNewToken(user);\n            userController.getUserByIdAllPath(user._id)\n                .then((userPath) => {\n                    resolve({ user: userPath, token: token});\n                },\n                (err) => {\n                    reject({\n                        success: false,\n                        data: err\n                    });\n                });\n        }\n        else {\n            reject(inativeUserJson);\n        }\n\n    });\n};\n\nconst validateLogin = (user) => {\n    return new Promise((resolve, reject) => {\n        let objRet = {};\n        user['username'] = validator.trim(validator.escape(user['username'].toString() || ''));\n        user['password'] = validator.trim(validator.escape(user['password'].toString() || ''));\n\n        if (validator.isNull(user['username']))\n            objRet['username'] = 'Informe o E-mail ou Usuário.';\n\n        if (validator.isNull(user['password']))\n            objRet['password'] = 'Senha é de preenchimento obrigatório.';\n\n        if (Object.keys(objRet).length !== 0) {\n            reject(objRet);\n        }\n        else {\n            resolve(user);\n        }\n    });\n};\n\nconst comparePassword = (candidateUser, userHash) => {\n    return new Promise((resolve, reject) => {\n        if (!userHash){\n            reject(invalidLoginJSON);\n        }\n        else {\n            crypt.compare(candidateUser.password, userHash.password,\n                 (err, isMatch) => {\n                    if (err)\n                        reject(err);\n                    else {\n                        resolve({ match: isMatch, user: userHash});\n                    }\n                });\n        }\n\n    });\n};"]}