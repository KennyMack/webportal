{"version":3,"sources":["course-type-controller.js"],"names":[],"mappings":"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","file":"course-type-controller-compiled.js","sourcesContent":["/**\n * Created by jonathan on 01/03/16.\n */\n'use strict';\n\nconst courseTypeModel = require('../models/course-type-model');\nconst validator       = require('validator');\nconst utils           = require('../utils/utils');\n\n// List all Courses Type\nmodule.exports.listCoursesType = () => {\n    return new Promise( (resolve, reject) => {\n        courseTypeModel.courseType.find({})\n            .exec()\n            .then(resolve, reject);\n    });\n\n};\n\n// Get Course Type By Id\nmodule.exports.getById = (id) => {\n    return new Promise( (resolve, reject) => {\n        courseTypeModel.courseType.findById(id)\n            .exec()\n            .then(resolve, reject);\n    });\n};\n\n// Remove Course Type By Id\nmodule.exports.removeById = (id) => {\n    return new Promise( (resolve, reject) => {\n        courseTypeModel.courseType.findByIdAndRemove(id)\n            .exec()\n            .then(resolve, reject);\n    });\n};\n\n// Create a Course Type\nmodule.exports.createCourseType = (courseType) => {\n    return new Promise( (resolve, reject) => {\n        new courseTypeModel.courseType({\n            'description': courseType['description']\n        }).save()\n            .then(resolve, reject);\n    });\n};\n\n// Update a Course Type\nmodule.exports.updateCourseType =  (courseType) => {\n    return new Promise( (resolve, reject) => {\n        let query = {_id: courseType['_id']};\n        let data = {\n            'description': courseType['description']\n        };\n\n        courseTypeModel.courseType.update(query, data, { upsert: false, new: true })\n            .exec()\n            .then(resolve, reject);\n    });\n};\n\nmodule.exports.validateCourseType =  (courseType, status) => {\n    return new Promise( (resolve, reject) => {\n        let objRet = {};\n\n        if (status !== utils.OPERATION_STATUS.DELETE &&\n            status !== utils.OPERATION_STATUS.SELECT) {\n            courseType['description'] = validator.trim(validator.escape(courseType['description'].toString() || ''));\n\n            if (validator.isNull(courseType['description']))\n                objRet['description'] = 'Descrição é de preenchimento obrigatório.';\n\n        }\n\n        if (status === utils.OPERATION_STATUS.UPDATE ||\n            status === utils.OPERATION_STATUS.SELECT ||\n            status === utils.OPERATION_STATUS.DELETE) {\n            courseType['_id'] = validator.trim(validator.escape(courseType['_id'].toString() || ''));\n\n            let idNull = validator.isNull(courseType['_id']);\n\n            if (idNull)\n                objRet['_id'] = 'Id do Tipo do curso é de preenchimento obrigatório.';\n\n            if (!idNull && (!validator.isMongoId(courseType['_id'])))\n                objRet['_id'] = 'Id do Tipo do curso informado é inválido.';\n        }\n\n        if (Object.keys(objRet).length !== 0) {\n            reject(objRet);\n        }\n        else {\n            resolve(courseType);\n        }\n    });\n};"]}