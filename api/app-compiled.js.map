{"version":3,"sources":["app.js"],"names":[],"mappings":"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","file":"app-compiled.js","sourcesContent":["'use strict';\n\nconst express    = require('express');\nconst path       = require('path');\nconst logger     = require('morgan');\nconst bodyParser = require('body-parser');\nconst config     = require('./config/config.js');\nconst socket_io  = require( \"socket.io\" );\nrequire('events').EventEmitter.defaultMaxListeners = Infinity;\n\n// App\nconst app = express();\n\n// Socket.io\nconst io         = socket_io();\napp.io           = io;\n\n// Globals\napp.set('secretKey', config['secretKey']);\n\n// view engine setup\napp.set('views', path.join(__dirname, 'views'));\napp.set('view engine', 'jade');\n\n// Middleware to Uncaught Exceptions\napp.use( (req, res, next)  => {\n  //console.log('domain');\n  let domain = require('domain').create();\n\n  domain.on('error',  (err)  => {\n    //console.error('DOMAIN ERROR CAUGHT\\n', err.stack);\n    try {\n      setTimeout( ()  => {\n        //console.error('Failsafe shutdown');\n        process.exit(1);\n      }, 5000);\n\n      let worker = require('cluster').worker;\n      if (worker)\n        worker.disconect();\n\n      server.close();\n\n      try {\n        next(err);\n      }\n      catch(err) {\n       // console.error('Express error mechanism failed.\\n', err.stack);\n        res.statusCode = 500;\n        res.setHeader('content-type', 'application/json');\n        res.end({\n          message: 'Server Error.',\n          error: {}\n        })\n      }\n    }\n    catch (err){\n      //console.error('Unable to send 500 response.\\n', err.stack);\n    }\n  });\n\n  domain.add(req);\n  domain.add(res);\n\n  domain.run(next);\n\n});\n\n// uncomment after placing your favicon in /public\n//app.use(favicon(path.join(__dirname, 'public', 'favicon.ico')));\napp.use(logger('dev'));\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: false }));\napp.use(express.static(path.join(__dirname, 'public')));\n\n\n\n// Middleware to headers\napp.use( (req, res, next)  => {\n\n  io.emit('hello', {hello: 'world'});\n  //console.log('middleware');\n  res.header('Access-Control-Allow-Origin', '*');\n  res.header('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE');\n  res.header('Access-Control-Allow-Headers', 'Content-Type');\n  res.header('Access-Control-Allow-Credentials', 'true');\n  res.header(\"Content-Type\", \"application/json; charset=utf-8\");\n  //TODO: Verify requests\n  //if (req.body instanceof JSON){//Object.keys(req.body).length !== 0) {\n  //  console.log('body');\n  //  if (validator.isJSON(JSON.parse(req.body.toString())))\n  //    console.log('json ok');\n  //  else\n  //    console.log('Erro json');\n  //\n  //}\n  next();\n});\n\n// Routers\nconst routes     = require('./routes/index')(express, io);\nconst users      = require('./routes/users')(express, io);\nconst auth       = require('./routes/auth')(express, io);\nconst courseType = require('./routes/course-type')(express, io);\nconst courses    = require('./routes/courses')(express, io);\nconst teachers   = require('./routes/teachers')(express, io);\nconst subjects   = require('./routes/subjects')(express, io);\nconst students   = require('./routes/students')(express, io);\nconst testapp    = require('./routes/testapp')(express, io);\nconst managers   = require('./routes/managers')(express, io);\nconst masters    = require('./routes/masters')(express, io);\n\n\napp.use('/', routes);\napp.use('/users', users);\napp.use('/mordor', auth);\napp.use('/course-type', courseType);\napp.use('/courses', courses);\napp.use('/teachers', teachers);\napp.use('/subjects', subjects);\napp.use('/students', students);\napp.use('/managers', managers);\napp.use('/masters', masters);\napp.use('/test', testapp);\n\n\n// catch 404 and forward to error handler\napp.use((req, res, next)  => {\n  let err = new Error('Not Found');\n  err.status = 404;\n  next(err);\n});\n\n// error handlers\n\n// development error handler\n// will print stacktrace\nif (app.get('env') === 'development') {\n  app.use((err, req, res)  => {\n    res.status(err.status || 500);\n    res.json({\n      message: err.message,\n      error: err\n    });\n  });\n}\n\n// production error handler\n// no stacktraces leaked to user\napp.use((err, req, res)  => {\n  res.status(err.status || 500);\n  res.json({\n    message: err.message,\n    error: {}\n  });\n});\n\nio.on(\"connection\", (socket) => {\n  //console.log('New connection found.');\n\n  /*socket.on('loko',  (data)  => {\n    console.log(data);\n    socket.broadcast.emit('loko', data);\n  })*/\n});\n\n\n\nmodule.exports = app;\n"]}