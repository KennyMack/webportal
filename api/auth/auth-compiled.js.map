{"version":3,"sources":["auth.js"],"names":[],"mappings":";;;AAGA;;AAEA,IAAM,MAAM,QAAQ,cAAR,CAAZ;AACA,IAAM,SAAS,QAAQ,qBAAR,CAAf;AACA,IAAM,OAAO,QAAQ,gBAAR,CAAb;;AAEA,IAAM,gBAAgB,SAAhB,aAAgB,CAAC,KAAD,EAAQ,QAAR,EAAqB;AACvC,QAAI,MAAJ,CAAW,KAAX,EAAkB,OAAO,WAAP,CAAlB,EAAyC,UAAC,GAAD,EAAM,OAAN,EAAkB;AACvD,iBAAS,GAAT,EAAc,OAAd;AACH,KAFD;AAGH,CAJD;;AAMA,OAAO,OAAP,CAAe,mBAAf,GAAqC,UAAC,GAAD,EAAM,GAAN,EAAW,IAAX,EAAoB;AACrD,QAAI,QAAQ,IAAI,OAAJ,CAAY,gBAAZ,KAAiC,IAAI,IAAJ,CAAS,KAA1C,IAAmD,IAAI,MAAJ,CAAW,KAA1E;;AAEA,QAAI,KAAJ,EAAW;AACP,sBAAc,KAAd,EAAsB,UAAC,GAAD,EAAM,OAAN,EAAkB;AACpC,gBAAI,GAAJ,EAAS;AACL,uBAAO,IAAI,MAAJ,CAAW,GAAX,EAAgB,IAAhB,CAAqB;AACxB,6BAAS,KADe;AAExB,0BAAM;AAFkB,iBAArB,CAAP;AAIH,aALD,MAKO;AACH,oBAAI,OAAJ,GAAc,OAAd;AACA;AACH;AACJ,SAVD;AAWH,KAZD,MAYO;AACH,eAAO,IAAI,MAAJ,CAAW,GAAX,EAAgB,IAAhB,CAAqB;AACxB,qBAAS,KADe;AAExB,kBAAM;AAFkB,SAArB,CAAP;AAIH;AACJ,CArBD;;AAuBA,OAAO,OAAP,CAAe,aAAf,GAA+B,aAA/B;;AAEA,OAAO,OAAP,CAAe,WAAf,GAA8B,UAAC,IAAD,EAAU;AACpC,WAAO,IAAI,IAAJ,CAAS;AACZ,aAAK,KAAK,GADE;AAEZ,eAAO,KAAK,KAFA;AAGZ,kBAAU,KAAK,QAHH;AAIZ,iBAAS,KAAK,OAJF;AAKZ,cAAM,KAAK,kBAAL;AALM,KAAT,EAMJ,OAAO,WAAP,CANI,EAMiB;AACpB,mBAAW;AADS,KANjB,CAAP;AASH,CAVD","file":"auth-compiled.js","sourcesContent":["/**\n * Created by jonathan on 21/02/16.\n */\n'use strict';\n\nconst jwt = require('jsonwebtoken');\nconst config = require('../config/config.js');\nconst util = require('../utils/utils');\n\nconst validateToken = (token, callback) => {\n    jwt.verify(token, config['secretKey'],   (err, decoded) => {\n        callback(err, decoded);\n    });\n};\n\nmodule.exports.ensureAuthenticated = (req, res, next) => {\n    let token = req.headers['x-access-token'] || req.body.token || req.params.token;\n\n    if (token) {\n        validateToken(token,  (err, decoded) => {\n            if (err) {\n                return res.status(401).json({\n                    success: false,\n                    data: 'Failed to authenticate token.'\n                });\n            } else {\n                req.decoded = decoded;\n                next();\n            }\n        });\n    } else {\n        return res.status(403).json({\n            success: false,\n            data: 'No token provided.'\n        });\n    }\n};\n\nmodule.exports.validateToken = validateToken;\n\nmodule.exports.getNewToken =  (user) => {\n    return jwt.sign({\n        _id: user._id,\n        email: user.email,\n        username: user.username,\n        persons: user.persons,\n        date: util.getCurrentDateTime()\n    }, config['secretKey'], {\n        expiresIn: '24h'\n    });\n};\n"]}